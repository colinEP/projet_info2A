LIVRABLE 3:
Colin EPALLE, Eléonore BARGES


Pour ce second livrable, nous suivrons le plan suivant : 

Dans un premier, nous détaillerons notre démarche, notre modélisation du problème et l'organisation de notre travail. 
Puis nous détaillerons un peu plus les problèmes que nous avons rencontrés ainsi que les objectifs que nous avons atteints dans cette première étape. 
Nous terminerons par les différents tests que nous avons effectués afin de faire un suivi de notre projet, et les choix que nous avons faits concernant les erreurs. 


I.

Pour ce troisième incrément, nous avons conservé la même manière de procéder que pour le second: ainsi nous avons effectué un travail théorique sur papier en amont, avant d'avancer chacun de notre côté sur le code grâce à github, tout en effectuant des bilans réguliers sur notre avancement.
Pour ce qui est de nos choix de modélisation et de code, nous avons choisi de créer deux tables de relocation dans lesquelles nous allions stocker les informations nécessaires à la relocation pour les sections respectives de .data et .text. Dans cette table de relocation, nous stockerons : un champs offset (le décalage de l'appel de l'étiquette), le type de relocation, un champs value (la section de definition de l'étiquette, lauquelle vaudra ) et un champs addend (qui correspondra au décalage relatif de la zone de définition de l'étiquette, lequel vaudra 0 si l'étiquette n'est pas définie dans le fichier).
Nous avons également choisi de ne pas effectuer le remplacement des pseudo-instructions avant la machine  état, mais bien dans celle-ci. Nous estimions en effet que, pour certaines pseudo-instructions (LW et SW), dont la nature des arguments détermine leur nature d'instruction (pseudo ou non), il était plus facile d'utiliser la machine à état (où instruction et arguments sont mémorisés dans la liste d'instructions).
Pour ce qui est des étiquettes non définies, nous avons finalement choisi de les ajouter à la table des symboles (dans la fonction look_for_undifined_etiq_in_...) tout en laissant la variable etiq_def à 0 tandis qu'elle sera à 1 pour toutes les étiquettes définies : cela permettra, à la relocation, de savoir que cette étiquette est définie ailleurs que dans le fichier actuel. Nous remplacerons alors la valeur de son adresse par une constante globale. 


II.

Les difficultés rencontrées furent les suivantes : 
- Pour l'incrément 2, nous avions stocké les arguments des instructions sous la forme de char* (car nous n'avions pas encore pu vérifier leur type). Or pour ce 3ème incrément, il nous fallait vérifier le type de arguments (Reg, Imm, Sa, Bas, Rel ou Abs) mais également leur nature (par exemple l'existence du registre). Ainsi, il nous a fallu convertir certains de nos arguments (sauf les étiquettes Label et les types Bas, que nous avons choisi de laisser sous forme de char*). Cette modification impliqua de modifier également la structure de nombre de nos fonctions (de lecture, de remplissage,..) ce qui exigea une attention particulière pour ne pas laisser d'incohérence dans le code. Cet incrément nécessitait plus de modification du code déjà écrit que la rédaction de nouvelles fonctions, ce qui s'est avéré compliqué et exigea une rigueur toute particulière. 
- Le fait d'avoir donc deux nature d'arguments différents (entiers ou char*) nécessitait la création d'une union taguée dans la structure INSTR mais également de deux fonctions différentes pour ajouter ou un entier ou un char* aux arguments de la cellule d'instruction courante (d'où la création de deux fonctions différentes : add_label_or_bas et add_int). 
- Nous avons également eu du mal à cerner ce qui est était attendu de nous: fallait-il ou non faire dans cet incrément les fonctions upper_16 et lower_16 (pour les pseudo-instructions LW et SW), à quel point devions nous détailler les types de relocation, prendre en compte les décalages des adresses,... 

Les objectifs que nous avons atteints sont les suivants : 
- Notre code remplit avec succès la table de relocation
- Les pseudo-instructions sont remplacées avec succès par leurs instructions équivalentes. 
- Les vérifications des types d'arguments et de leur nature, pour les instructions, nous semblent judicieuses. 
- Notre code nous semble assez robuste, c'est-à-dire capable de repérer un certains nombre d'erreurs. 
- ...

III.


Enfin, concernant les fichiers tests que nous avons réalisés:
- Nous avons mis à jour nos fonctions d'affichage (notamment pour les instructions) pour pouvoir suivre le bon fonctionnement de notre modification des pseudo-instructions. Nous avons également du faire une fonction d'affichage de notre table de relocation. 
- De même que pour l'incrément 2, nous avons énormément utilisé un fichier de test .s, que nous modifions au fur et à mesure que nous souhaitions tester de nouveaux cas.





